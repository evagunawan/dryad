#!/usr/bin/env python3
import subprocess as sub
import sys
import os
import docker
import argparse
import time
import core_worker as cw
import snp_worker as snpw
import multiprocessing as mp
from shutil import copyfile

#determine command line arguments and get path
parser = argparse.ArgumentParser(description='Construct phylogenetic trees for outbreak investigations.')
parser.add_argument('-g',metavar='glist', type=str,help="text file listing the location of each assembled geneome to be included in the analysis")
parser.add_argument('-r',metavar='rlist', type=str,help="text file listing the location of paired reads to be included in the analysis")
parser.add_argument('-o',metavar='output', type=str,help="output directory - defaults to working directory")
parser.add_argument('-k',metavar='keep', action='store_const', help="keep temp directory",const=True,default=False)
parser.add_argument('-c',metavar='core', action='store_const',help="construct core genome reference free maximum likelihood phylogenetic tree",const=True,default=False)
parser.add_argument('-s',metavar='snp', action='store_const',help="create SNP tree using Lyve-SET",const=True,default=False)
parser.add_argument('-f',metavar='reference', type=str,help="reference fasta for SNP tree")
args = parser.parse_args()
try:
    g_path = os.path.abspath(args.g)
except (AttributeError, TypeError) as err:
    g_path = False
try:
    r_path = os.path.abspath(args.r)
except (AttributeError, TypeError) as err:
    r_path = False
try:
    reference = os.path.abspath(args.f)
except (AttributeError, TypeError) as err:
    reference = False

keep_temp = args.k
lyveset = args.s
core = args.c

if core == False and lyveset == False:
    print("Please select phylogenetic constuction method: core genome [-c] or SNP [-s]")
    sys.exit(0)

if lyveset == True and reference == False:
    print("Lyve-SET SNP tree needs a reference: [-f]")
    sys.exit(0)

#get current working dir if output is empty
try:
    out = os.path.abspath(args.o)
except (AttributeError, TypeError) as err:
    out = os.getcwd()

if g_path:
    #open file and pull locations into a list
    with open(g_path,'r') as f:
        g_list = f.readlines()
    #clean list items of '\n'
    g_list = [x.strip() for x in g_list]

if r_path:
    #open file and pull locations into a list
    with open(r_path,'r') as f:
        r_list = f.readlines()
    #clean list items of '\n'
    r_list = [x.strip() for x in r_list]

#connect to docker environment
client = docker.from_env()

#get current user id and group for file creation
user_id = sub.check_output(["id","-u"]).decode("utf-8").strip()
user_grp = sub.check_output(["id","-g"]).decode("utf-8").strip()

if core == True:
    #create and start core genome worker
    print("Starting Core Genome phylogeny")
    cg_p = mp.Process(target=cw.cg_tree(out,g_list,user_id,user_grp,client,keep_temp))
    cg_p.start()

if lyveset ==True:
    print("Starting SNP phylogeny")
    pass
    #create and start snp tree worker
    snp_p = mp.Process(target=snpw.snp_tree(out,r_list,user_id,user_grp,client,reference,keep_temp,4))
    snp_p.start()
